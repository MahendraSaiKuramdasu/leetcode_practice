class Solution {
    private int findPar(ArrayList<Integer> par, int x){
        if( par.get(x) == x){
            return x;
        }
        par.set(x, findPar(par, par.get(x)));
        return par.get(x);
    }

    private void DSU(int i, int j, ArrayList<Integer> par, ArrayList<Integer> rank, ArrayList<Integer> mal){
        int par_i = findPar(par, i);
        int par_j = findPar(par, j);
        int rank_i = rank.get(par_i);
        int rank_j = rank.get(par_j);
        int mal_i = mal.get(par_i);
        int mal_j = mal.get(par_j);
        if(rank_i >= rank_j){
            // rank[par_i] = rank_i + rank_j;
            rank.set(par_i, rank_i + rank_j);
            // rank[par_j] = 0;
            rank.set(par_j, 0);
            // par[par_j] = par_i;
            par.set(par_j, par_i);
            // mal[par_i] = mal_i + mal_j;
            mal.set(par_i, mal_i + mal_j);
        }
        else{
            // rank[par_j] = rank_i + rank_j;
            rank.set(par_j, rank_i + rank_j);
            // rank[par_i] = 0;
            rank.set(par_i, 0);
            // par[par_i] = par_j;
            par.set(par_i, par_j);
            // mal[par_j] = mal_i + mal_j;
            mal.set(par_j, mal_i + mal_j);
        }
    }

    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        int m = initial.length;
        ArrayList<Integer> par = new ArrayList<>(); 
        ArrayList<Integer> rank = new ArrayList<>(); 
        ArrayList<Integer> mal = new ArrayList<>();
        for(int i=0; i<n; i++){
            par.add(i);
            rank.add(1);
            mal.add(0);
        }
        for(int i=0; i<m; i++){
            mal.set(initial[i], 1);
        }
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                if(i != j){
                    if(graph[i][j] == 1){
                        int par_i = findPar(par, i);
                        int par_j = findPar(par, j);
                        if(par_i != par_j){
                            DSU(i, j, par, rank, mal);
                        }
                    }
                }
            }
        }
        int ans = -1;
        int max = -1;
        Arrays.sort(initial);
        for(int i=0; i<m; i++){
            int index = initial[i];
            int par_i = findPar(par, index);
            int mal_cnt = mal.get(par_i);
            if(mal_cnt == 1){
                if(max < rank.get(par_i)){
                    ans = index;
                    max = rank.get(par_i);
                }
            }
        }
        if(ans == -1) return initial[0];
        return ans;
    }
}